import { Configuration } from '../configuration';
import { Observable } from '../rxjsStub';
import { App } from '../models/App';
import { ExportPlayersRequestBody } from '../models/ExportPlayersRequestBody';
import { GetNotificationRequestBody } from '../models/GetNotificationRequestBody';
import { InlineResponse200 } from '../models/InlineResponse200';
import { InlineResponse2001 } from '../models/InlineResponse2001';
import { InlineResponse2002 } from '../models/InlineResponse2002';
import { InlineResponse2003 } from '../models/InlineResponse2003';
import { InlineResponse2004 } from '../models/InlineResponse2004';
import { InlineResponse2005 } from '../models/InlineResponse2005';
import { InlineResponse201 } from '../models/InlineResponse201';
import { Notification } from '../models/Notification';
import { NotificationSlice } from '../models/NotificationSlice';
import { OutcomeData } from '../models/OutcomeData';
import { Player } from '../models/Player';
import { PlayerSlice } from '../models/PlayerSlice';
import { Segment } from '../models/Segment';
import { UpdatePlayerTagsRequestBody } from '../models/UpdatePlayerTagsRequestBody';
import { DefaultApiRequestFactory, DefaultApiResponseProcessor } from "../apis/DefaultApi";
export declare class ObservableDefaultApi {
    private requestFactory;
    private responseProcessor;
    private configuration;
    constructor(configuration: Configuration, requestFactory?: DefaultApiRequestFactory, responseProcessor?: DefaultApiResponseProcessor);
    cancelNotification(app_id: string, notification_id: string, _options?: Configuration): Observable<InlineResponse2001>;
    createApp(app: App, _options?: Configuration): Observable<App>;
    createNotification(notification: Notification, _options?: Configuration): Observable<InlineResponse200>;
    createPlayer(player: Player, _options?: Configuration): Observable<InlineResponse2004>;
    createSegments(app_id: string, segment?: Segment, _options?: Configuration): Observable<InlineResponse201>;
    deletePlayer(app_id: string, player_id: string, _options?: Configuration): Observable<InlineResponse2001>;
    deleteSegments(app_id: string, segment_id: string, _options?: Configuration): Observable<InlineResponse2003>;
    exportPlayers(app_id: string, export_players_request_body?: ExportPlayersRequestBody, _options?: Configuration): Observable<InlineResponse2005>;
    getApp(app_id: string, _options?: Configuration): Observable<App>;
    getApps(_options?: Configuration): Observable<string>;
    getNotification(app_id: string, notification_id: string, _options?: Configuration): Observable<Notification>;
    getNotificationHistory(notification_id: string, get_notification_request_body: GetNotificationRequestBody, _options?: Configuration): Observable<InlineResponse2002>;
    getNotifications(app_id: string, limit?: string, offset?: number, kind?: 0 | 1 | 3, _options?: Configuration): Observable<NotificationSlice>;
    getOutcomes(app_id: string, outcome_names: string, outcome_names2?: string, outcome_time_range?: string, outcome_platforms?: string, outcome_attribution?: string, _options?: Configuration): Observable<Array<OutcomeData>>;
    getPlayer(app_id: string, player_id: string, email_auth_hash?: string, _options?: Configuration): Observable<Player>;
    getPlayers(app_id: string, limit?: string, offset?: number, _options?: Configuration): Observable<PlayerSlice>;
    updateApp(app_id: string, app: App, _options?: Configuration): Observable<App>;
    updatePlayer(player_id: string, player: Player, _options?: Configuration): Observable<InlineResponse2001>;
    updatePlayerTags(app_id: string, external_user_id: string, update_player_tags_request_body?: UpdatePlayerTagsRequestBody, _options?: Configuration): Observable<InlineResponse2003>;
}
